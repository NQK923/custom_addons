# -*- coding: utf-8 -*-
from odoo import http
from odoo.http import request
import json
from datetime import datetime


class TreatmentAndCareController(http.Controller):
    @http.route('/clinic/treatment_plans', type='http', auth='public', website=True, methods=['GET', 'POST'])
    def treatment_plans(self, **kwargs):
        search_value = kwargs.get('search_value', '')
        patient = False
        treatment_plans = False
        all_treatment_plans = False  # All plans to show when no specific patient is selected

        if search_value:
            patient = request.env['clinic.patient'].sudo().search([
                '|', ('code', 'ilike', search_value), ('name', 'ilike', search_value)
            ], limit=1)

            if patient:
                treatment_plans = request.env['treatment.plan'].sudo().search([
                    ('patient_id', '=', patient.id)
                ])

        # Get all treatment plans if no search is performed or if search didn't yield results
        if not treatment_plans:
            all_treatment_plans = request.env['treatment.plan'].sudo().search([], order='id desc')

        values = {
            'patient': patient,
            'treatment_plans': treatment_plans,
            'all_treatment_plans': all_treatment_plans,
            'search_value': search_value,
        }

        return request.render('Treatment_and_care_management.treatment_plans_template', values)

    @http.route('/clinic/treatment_plan/create', type='http', auth='public', website=True, methods=['GET', 'POST'])
    def treatment_plan_create(self, **kwargs):
        if request.httprequest.method == 'POST':
            # Extract form data
            patient_id = int(kwargs.get('patient_id'))
            start_date = kwargs.get('start_date')
            end_date = kwargs.get('end_date') if kwargs.get('end_date') else False

            # Create new treatment plan
            new_plan = request.env['treatment.plan'].sudo().create({
                'code': 'New',  # Will be auto-generated by the model
                'patient_id': patient_id,
                'start_date': start_date,
                'end_date': end_date,
            })

            return request.redirect(f'/clinic/treatment_plan_details/{new_plan.id}')

        # GET request: show form
        patient_id = int(kwargs.get('patient_id', 0))
        patient = request.env['clinic.patient'].sudo().browse(patient_id)

        if not patient.exists():
            return request.redirect('/clinic/treatment_plans')

        values = {
            'patient': patient,
            'today': datetime.today().strftime('%Y-%m-%d'),
        }

        return request.render('Treatment_and_care_management.treatment_plan_form_template', values)

    @http.route('/clinic/treatment_plan/edit/<int:plan_id>', type='http', auth='public', website=True,
                methods=['GET', 'POST'])
    def treatment_plan_edit(self, plan_id, **kwargs):
        plan = request.env['treatment.plan'].sudo().browse(plan_id)

        if not plan.exists():
            return request.redirect('/clinic/treatment_plans')

        if request.httprequest.method == 'POST':
            # Extract form data
            start_date = kwargs.get('start_date')
            end_date = kwargs.get('end_date') if kwargs.get('end_date') else False

            # Update treatment plan
            plan.sudo().write({
                'start_date': start_date,
                'end_date': end_date,
            })

            return request.redirect(f'/clinic/treatment_plan_details/{plan.id}')

        # GET request: show form with current data
        values = {
            'plan': plan,
            'patient': plan.patient_id,
        }

        return request.render('Treatment_and_care_management.treatment_plan_edit_template', values)

    @http.route('/clinic/treatment_plan/delete/<int:plan_id>', type='http', auth='public', website=True)
    def treatment_plan_delete(self, plan_id):
        plan = request.env['treatment.plan'].sudo().browse(plan_id)

        if plan.exists():
            patient_id = plan.patient_id.id
            plan.sudo().unlink()
            return request.redirect(f'/clinic/treatment_plans?search_value={plan.patient_id.code}')

        return request.redirect('/clinic/treatment_plans')

    @http.route('/clinic/treatment_plan_details/<int:plan_id>', type='http', auth='public', website=True)
    def treatment_plan_details(self, plan_id, **kwargs):
        plan = request.env['treatment.plan'].sudo().browse(plan_id)
        if not plan.exists():
            return request.not_found()

        values = {
            'plan': plan,
            'processes': plan.treatment_process_ids,
        }

        return request.render('Treatment_and_care_management.treatment_plan_details_template', values)

    @http.route('/clinic/treatment_process/create', type='http', auth='public', website=True, methods=['GET', 'POST'])
    def treatment_process_create(self, **kwargs):
        if request.httprequest.method == 'POST':
            # Extract form data
            plan_id = int(kwargs.get('plan_id'))
            service_id = int(kwargs.get('service_id'))
            executor_id = int(kwargs.get('executor_id'))
            state = kwargs.get('state')
            execution_time = kwargs.get('execution_time') if kwargs.get('execution_time') else False
            prescription_id = int(kwargs.get('prescription_id')) if kwargs.get(
                'prescription_id') else False  # Thêm prescription_id

            if execution_time and 'T' in execution_time:
                execution_time = execution_time.replace('T', ' ')

            # Create new treatment process
            new_process = request.env['treatment.process'].sudo().create({
                'code': 'New',  # Will be auto-generated by the model
                'plan_id': plan_id,
                'service_id': service_id,
                'executor_id': executor_id,
                'state': state,
                'execution_time': execution_time,
                'prescription_id': prescription_id,  # Lưu prescription_id
            })

            return request.redirect(f'/clinic/treatment_plan_details/{plan_id}')

        # GET request: show form
        plan_id = int(kwargs.get('plan_id', 0))
        plan = request.env['treatment.plan'].sudo().browse(plan_id)

        if not plan.exists():
            return request.redirect('/clinic/treatment_plans')

        services = request.env['clinic.service'].sudo().search([])
        staff = request.env['clinic.staff'].sudo().search([])
        prescriptions = request.env['prescription.order'].sudo().search([])  # Truy vấn đơn thuốc

        values = {
            'plan': plan,
            'services': services,
            'staff': staff,
            'prescriptions': prescriptions,  # Truyền prescriptions vào template
            'now': datetime.now().strftime('%Y-%m-%dT%H:%M'),
        }

        return request.render('Treatment_and_care_management.treatment_process_form_template', values)

    @http.route('/clinic/treatment_process/edit/<int:process_id>', type='http', auth='public', website=True,
                methods=['GET', 'POST'])
    def treatment_process_edit(self, process_id, **kwargs):
        process = request.env['treatment.process'].sudo().browse(process_id)

        if not process.exists():
            return request.redirect('/clinic/treatment_plans')

        if request.httprequest.method == 'POST':
            # Extract form data
            service_id = int(kwargs.get('service_id'))
            executor_id = int(kwargs.get('executor_id'))
            state = kwargs.get('state')
            execution_time = kwargs.get('execution_time') if kwargs.get('execution_time') else False
            prescription_id = int(kwargs.get('prescription_id')) if kwargs.get(
                'prescription_id') else False  # Thêm prescription_id

            if execution_time and 'T' in execution_time:
                execution_time = execution_time.replace('T', ' ')

            # Update treatment process
            process.sudo().write({
                'service_id': service_id,
                'executor_id': executor_id,
                'state': state,
                'execution_time': execution_time,
                'prescription_id': prescription_id,  # Cập nhật prescription_id
            })

            return request.redirect(f'/clinic/treatment_plan_details/{process.plan_id.id}')

        # GET request: show form with current data
        services = request.env['clinic.service'].sudo().search([])
        staff = request.env['clinic.staff'].sudo().search([])
        prescriptions = request.env['prescription.order'].sudo().search([])  # Truy vấn đơn thuốc

        values = {
            'process': process,
            'plan': process.plan_id,
            'services': services,
            'staff': staff,
            'prescriptions': prescriptions,  # Truyền prescriptions vào template
        }

        return request.render('Treatment_and_care_management.treatment_process_edit_template', values)

    @http.route('/clinic/treatment_process/delete/<int:process_id>', type='http', auth='public', website=True)
    def treatment_process_delete(self, process_id):
        process = request.env['treatment.process'].sudo().browse(process_id)

        if process.exists():
            plan_id = process.plan_id.id
            process.sudo().unlink()
            return request.redirect(f'/clinic/treatment_plan_details/{plan_id}')

        return request.redirect('/clinic/treatment_plans')

    @http.route('/clinic/patient_care', type='http', auth='public', website=True, methods=['GET', 'POST'])
    def patient_care(self, **kwargs):
        search_value = kwargs.get('search_value', '')
        patient = False
        care_records = False
        all_care_records = False  # All care records to show when no specific patient is selected

        if search_value:
            patient = request.env['clinic.patient'].sudo().search([
                '|', ('code', 'ilike', search_value), ('name', 'ilike', search_value)
            ], limit=1)

            if patient:
                care_records = request.env['patient.care.tracking'].sudo().search([
                    ('patient_id', '=', patient.id)
                ])

        # Get all care records if no search is performed or if search didn't yield results
        if not care_records:
            all_care_records = request.env['patient.care.tracking'].sudo().search([], order='id desc')

        values = {
            'patient': patient,
            'care_records': care_records,
            'all_care_records': all_care_records,
            'search_value': search_value,
        }

        return request.render('Treatment_and_care_management.patient_care_template', values)

    @http.route('/clinic/patient_care/create', type='http', auth='public', website=True, methods=['GET', 'POST'])
    def patient_care_create(self, **kwargs):
        if request.httprequest.method == 'POST':
            # Extract form data
            patient_id = int(kwargs.get('patient_id'))
            care_date = kwargs.get('care_date')
            statenew = kwargs.get('statenew')
            doctor_id = int(kwargs.get('doctor_id')) if kwargs.get('doctor_id') else False

            # Vital signs
            temperature = float(kwargs.get('temperature')) if kwargs.get('temperature') else 0.0
            blood_pressure = kwargs.get('blood_pressure')
            heart_rate = int(kwargs.get('heart_rate')) if kwargs.get('heart_rate') else 0
            respiration_rate = int(kwargs.get('respiration_rate')) if kwargs.get('respiration_rate') else 0
            oxygen_saturation = float(kwargs.get('oxygen_saturation')) if kwargs.get('oxygen_saturation') else 0.0

            # Special care
            special_care_description = kwargs.get('special_care_description')
            medical_equipment_used = kwargs.get('medical_equipment_used')
            is_emergency = kwargs.get('is_emergency') == 'on'

            # Daily care
            daily_nursing_notes = kwargs.get('daily_nursing_notes')
            abnormal_event = kwargs.get('abnormal_event')
            is_alert_triggered = kwargs.get('is_alert_triggered') == 'on'

            # Caregiver info
            caregiver_role = kwargs.get('caregiver_role')

            # Create new care record
            new_care = request.env['patient.care.tracking'].sudo().create({
                'patient_id': patient_id,
                'care_date': care_date,
                'statenew': statenew,
                'doctor_id': doctor_id,
                'temperature': temperature,
                'blood_pressure': blood_pressure,
                'heart_rate': heart_rate,
                'respiration_rate': respiration_rate,
                'oxygen_saturation': oxygen_saturation,
                'special_care_description': special_care_description,
                'medical_equipment_used': medical_equipment_used,
                'is_emergency': is_emergency,
                'daily_nursing_notes': daily_nursing_notes,
                'abnormal_event': abnormal_event,
                'is_alert_triggered': is_alert_triggered,
                'caregiver_role': caregiver_role,
            })

            return request.redirect(f'/clinic/patient_care_details/{new_care.id}')

        # GET request: show form
        patient_id = int(kwargs.get('patient_id', 0))
        patient = request.env['clinic.patient'].sudo().browse(patient_id)

        if not patient.exists():
            return request.redirect('/clinic/patient_care')

        staff = request.env['clinic.staff'].sudo().search([])

        values = {
            'patient': patient,
            'staff': staff,
            'today': datetime.today().strftime('%Y-%m-%d'),
        }

        return request.render('Treatment_and_care_management.patient_care_form_template', values)

    @http.route('/clinic/patient_care/edit/<int:care_id>', type='http', auth='public', website=True,
                methods=['GET', 'POST'])
    def patient_care_edit(self, care_id, **kwargs):
        care = request.env['patient.care.tracking'].sudo().browse(care_id)

        if not care.exists():
            return request.redirect('/clinic/patient_care')

        if request.httprequest.method == 'POST':
            # Extract form data
            care_date = kwargs.get('care_date')
            statenew = kwargs.get('statenew')
            doctor_id = int(kwargs.get('doctor_id')) if kwargs.get('doctor_id') else False

            # Vital signs
            temperature = float(kwargs.get('temperature')) if kwargs.get('temperature') else 0.0
            blood_pressure = kwargs.get('blood_pressure')
            heart_rate = int(kwargs.get('heart_rate')) if kwargs.get('heart_rate') else 0
            respiration_rate = int(kwargs.get('respiration_rate')) if kwargs.get('respiration_rate') else 0
            oxygen_saturation = float(kwargs.get('oxygen_saturation')) if kwargs.get('oxygen_saturation') else 0.0

            # Special care
            special_care_description = kwargs.get('special_care_description')
            medical_equipment_used = kwargs.get('medical_equipment_used')
            is_emergency = kwargs.get('is_emergency') == 'on'

            # Daily care
            daily_nursing_notes = kwargs.get('daily_nursing_notes')
            abnormal_event = kwargs.get('abnormal_event')
            is_alert_triggered = kwargs.get('is_alert_triggered') == 'on'

            # Caregiver info
            caregiver_role = kwargs.get('caregiver_role')

            # Update care record
            care.sudo().write({
                'care_date': care_date,
                'statenew': statenew,
                'doctor_id': doctor_id,
                'temperature': temperature,
                'blood_pressure': blood_pressure,
                'heart_rate': heart_rate,
                'respiration_rate': respiration_rate,
                'oxygen_saturation': oxygen_saturation,
                'special_care_description': special_care_description,
                'medical_equipment_used': medical_equipment_used,
                'is_emergency': is_emergency,
                'daily_nursing_notes': daily_nursing_notes,
                'abnormal_event': abnormal_event,
                'is_alert_triggered': is_alert_triggered,
                'caregiver_role': caregiver_role,
            })

            return request.redirect(f'/clinic/patient_care_details/{care_id}')

        # GET request: show form with current data
        staff = request.env['clinic.staff'].sudo().search([])

        values = {
            'care': care,
            'patient': care.patient_id,
            'staff': staff,
        }

        return request.render('Treatment_and_care_management.patient_care_edit_template', values)

    @http.route('/clinic/patient_care/delete/<int:care_id>', type='http', auth='public', website=True)
    def patient_care_delete(self, care_id):
        care = request.env['patient.care.tracking'].sudo().browse(care_id)

        if care.exists():
            search_value = care.patient_id.code
            care.sudo().unlink()
            return request.redirect(f'/clinic/patient_care?search_value={search_value}')

        return request.redirect('/clinic/patient_care')

    @http.route('/clinic/patient_care_details/<int:care_id>', type='http', auth='public', website=True)
    def patient_care_details(self, care_id, **kwargs):
        care = request.env['patient.care.tracking'].sudo().browse(care_id)
        if not care.exists():
            return request.not_found()

        values = {
            'care': care,
        }

        return request.render('Treatment_and_care_management.patient_care_details_template', values)